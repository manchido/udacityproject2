Parameters:
  # Paramenters are entirely optional.
  # but using them will make your cloudformation templates more reusable
  # use them for things that may change over time, such as instance type,
  # VPCs and so on.
    ResourceName: 
        Description: Name of environment setup
        Type: String
    VpcCIDR:
        Description: CIDR block for the VPC
        Type: String
    PublicSubnet1CIDR:
       Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
       Type: String

    PublicSubnet2CIDR:
       Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
       Type: String

    PrivateSubnet1CIDR:
       Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
       Type: String

    PrivateSubnet2CIDR:
       Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
       Type: String

    ServerAMI: 
       Description: AMI for auto scaling group launch configuration
       Type: String

Resources:
  # Network resources

      VPC: 
          Type: AWS::EC2::VPC
          Properties:
              CidrBlock: !Ref VpcCIDR
              EnableDnsHostnames: true
              Tags: 
                - Key: Name 
                  Value: !Ref ResourceName
      InternetGateway:
          Type: AWS::EC2::InternetGateway
          Properties:
              Tags:
                  - Key: Name
                    Value: !Ref ResourceName
              
      InternetGatewayAttachment:
          Type: AWS::EC2::VPCGatewayAttachment
          Properties:
              InternetGatewayId: !Ref InternetGateway
              VpcId: !Ref VPC

      PublicSubnet1: 
          Type: AWS::EC2::Subnet
          Properties:
              VpcId: !Ref VPC
              AvailabilityZone: !Select [ 0, !GetAZs '' ]
              CidrBlock: !Ref PublicSubnet1CIDR
              MapPublicIpOnLaunch: true
              Tags: 
                  - Key: Name 
                    Value: !Sub ${ResourceName} Public Subnet (AZ1)

      PublicSubnet2: 
          Type: AWS::EC2::Subnet
          Properties:
              VpcId: !Ref VPC
              AvailabilityZone: !Select [ 1, !GetAZs '' ]
              CidrBlock: !Ref PublicSubnet2CIDR
              MapPublicIpOnLaunch: true
              Tags: 
                  - Key: Name 
                    Value: !Sub ${ResourceName} Public Subnet (AZ2)

      PrivateSubnet1: 
          Type: AWS::EC2::Subnet
          Properties:
              VpcId: !Ref VPC
              AvailabilityZone: !Select [ 0, !GetAZs '' ]
              CidrBlock: !Ref PrivateSubnet1CIDR
              MapPublicIpOnLaunch: false
              Tags: 
                  - Key: Name 
                    Value: !Sub ${ResourceName} Private Subnet (AZ1)

      PrivateSubnet2: 
          Type: AWS::EC2::Subnet
          Properties:
              VpcId: !Ref VPC
              AvailabilityZone: !Select [ 1, !GetAZs '' ]
              CidrBlock: !Ref PrivateSubnet2CIDR
              MapPublicIpOnLaunch: false
              Tags: 
                  - Key: Name 
                    Value: !Sub ${ResourceName} Private Subnet (AZ2)

      NatGateway1EIP:
          Type: AWS::EC2::EIP
          DependsOn: InternetGatewayAttachment
          Properties: 
              Domain: vpc

      NatGateway2EIP:
          Type: AWS::EC2::EIP
          DependsOn: InternetGatewayAttachment
          Properties:
              Domain: vpc

      NatGateway1: 
          Type: AWS::EC2::NatGateway
          Properties: 
              AllocationId: !GetAtt NatGateway1EIP.AllocationId
              SubnetId: !Ref PublicSubnet1

      NatGateway2: 
          Type: AWS::EC2::NatGateway
          Properties:
              AllocationId: !GetAtt NatGateway2EIP.AllocationId
              SubnetId: !Ref PublicSubnet2

      PublicRouteTable:
          Type: AWS::EC2::RouteTable
          Properties: 
              VpcId: !Ref VPC
              Tags: 
                  - Key: Name 
                    Value: !Sub ${ResourceName} Public Routes

      DefaultPublicRoute: 
          Type: AWS::EC2::Route
          DependsOn: InternetGatewayAttachment
          Properties: 
              RouteTableId: !Ref PublicRouteTable
              DestinationCidrBlock: 0.0.0.0/0
              GatewayId: !Ref InternetGateway

      PublicSubnet1RouteTableAssociation:
          Type: AWS::EC2::SubnetRouteTableAssociation
          Properties:
              RouteTableId: !Ref PublicRouteTable
              SubnetId: !Ref PublicSubnet1

      PublicSubnet2RouteTableAssociation:
          Type: AWS::EC2::SubnetRouteTableAssociation
          Properties:
              RouteTableId: !Ref PublicRouteTable
              SubnetId: !Ref PublicSubnet2
      

      PrivateRouteTable1:
          Type: AWS::EC2::RouteTable
          Properties: 
              VpcId: !Ref VPC
              Tags: 
                  - Key: Name 
                    Value: !Sub ${ResourceName} Private Routes (AZ1)

      DefaultPrivateRoute1:
          Type: AWS::EC2::Route
          Properties:
              RouteTableId: !Ref PrivateRouteTable1
              DestinationCidrBlock: 0.0.0.0/0
              NatGatewayId: !Ref NatGateway1

      PrivateSubnet1RouteTableAssociation:
          Type: AWS::EC2::SubnetRouteTableAssociation
          Properties:
              RouteTableId: !Ref PrivateRouteTable1
              SubnetId: !Ref PrivateSubnet1

      PrivateRouteTable2:
          Type: AWS::EC2::RouteTable
          Properties: 
              VpcId: !Ref VPC
              Tags: 
                  - Key: Name 
                    Value: !Sub ${ResourceName} Private Routes (AZ2)

      DefaultPrivateRoute2:
          Type: AWS::EC2::Route
          Properties:
              RouteTableId: !Ref PrivateRouteTable2
              DestinationCidrBlock: 0.0.0.0/0
              NatGatewayId: !Ref NatGateway2

      PrivateSubnet2RouteTableAssociation:
          Type: AWS::EC2::SubnetRouteTableAssociation
          Properties:
              RouteTableId: !Ref PrivateRouteTable2
              SubnetId: !Ref PrivateSubnet2
        # instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
        # never give too much permissions to your EC2 instances! if they get hacked, the permissions get hacked also!
        # in this example, I create a Role called UdacityS3ReadOnlyC2 and just give it a policy of S3 Read-Only Access
        
      UdacityS3ReadOnlyEC2:
        Type: 'AWS::IAM::Role'
        Properties:
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - ec2.amazonaws.com
                Action:
                  - 'sts:AssumeRole'
          ManagedPolicyArns:
              - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

      ProfileWithRolesForOurApp:
          Type: AWS::IAM::InstanceProfile
          Properties: 
            Roles:
              - !Ref UdacityS3ReadOnlyEC2  
      
      LoadBalancerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow http on port 80 to our load balancer
          VpcId: !Ref VPC
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
      WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow http to our hosts and SSH from local only
          VpcId: !Ref VPC
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0
      WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
          UserData:
            Fn::Base64: !Sub |
              #!/bin/bash
              apt-get update -y
              apt-get install apache2 -y
              systemctl start apache2.service
              cd /var/www/html
              echo "Udacity Demo Web Server Up and Running!" > index.html          
          # ToDo: AMI ID of Ubuntu Linux machine. Too get one, try creating a VM from the web console. 
          ImageId: !Ref ServerAMI
          # ToDo: Change the key-pair name, as applicable to you. 
          SecurityGroups:
          - Ref: WebServerSecGroup
          InstanceType: t2.medium
          BlockDeviceMappings:
          - DeviceName: "/dev/sdk"
            Ebs:
              VolumeSize: '10'
      WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
          VPCZoneIdentifier: 
              - !Ref PrivateSubnet1 
              - !Ref PrivateSubnet2 
          LaunchConfigurationName:
            Ref: WebAppLaunchConfig
          MinSize: '4'
          MaxSize: '5'
          TargetGroupARNs:
          - Ref: WebAppTargetGroup
      WebAppLoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
          Subnets:
          - Ref: PublicSubnet1
          - Ref: PublicSubnet2
          SecurityGroups:
          - Ref: LoadBalancerSecGroup
      Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
          DefaultActions:
          - Type: forward
            TargetGroupArn:
              Ref: WebAppTargetGroup
          LoadBalancerArn:
            Ref: WebAppLoadBalancer
          Port: '80'
          Protocol: HTTP
      ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
          Actions:
          - Type: forward
            TargetGroupArn: !Ref 'WebAppTargetGroup'
          Conditions:
          - Field: path-pattern
            Values: [/]
          ListenerArn: !Ref 'Listener'
          Priority: 1
      WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
          HealthCheckIntervalSeconds: 10
          HealthCheckPath: /
          HealthCheckProtocol: HTTP
          HealthCheckTimeoutSeconds: 8
          HealthyThresholdCount: 2
          Port: 80
          Protocol: HTTP
          UnhealthyThresholdCount: 5
          VpcId: !Ref VPC
          
Outputs:
    LBDNSName:
        Description: DNS Name of Loadbalancer to reach our server
        Value: !Sub "http://${WebAppLoadBalancer.DNSName}"
        Export: 
            Name: !Sub ${ResourceName}-LoadBalancerDNSName
    
    VPC: 
        Description: A reference to the created VPC
        Value: !Ref VPC
        Export:
          Name: !Sub ${ResourceName}-VPCID

    VPCPublicRouteTable:
        Description: Public Routing
        Value: !Ref PublicRouteTable
        Export:
          Name: !Sub ${ResourceName}-PUB-RT

    VPCPrivateRouteTable1:
        Description: Private Routing AZ1
        Value: !Ref PrivateRouteTable1
        Export:
          Name: !Sub ${ResourceName}-PRI1-RT

    VPCPrivateRouteTable2:
        Description: Private Routing AZ2
        Value: !Ref PrivateRouteTable2
        Export:
          Name: !Sub ${ResourceName}-PRI2-RT


    PublicSubnet1:
        Description: A reference to the public subnet in the 1st Availability Zone
        Value: !Ref PublicSubnet1
        Export:
          Name: !Sub ${ResourceName}-PUB1-SN

    PublicSubnet2: 
        Description: A reference to the public subnet in the 2nd Availability Zone
        Value: !Ref PublicSubnet2
        Export:
          Name: !Sub ${ResourceName}-PUB2-SN

    PrivateSubnet1:
        Description: A reference to the private subnet in the 1st Availability Zone
        Value: !Ref PrivateSubnet1
        Export:
          Name: !Sub ${ResourceName}-PRI1-SN

    PrivateSubnet2: 
        Description: A reference to the private subnet in the 2nd Availability Zone
        Value: !Ref PrivateSubnet2
        Export:
          Name: !Sub ${ResourceName}-PRI2-SN

